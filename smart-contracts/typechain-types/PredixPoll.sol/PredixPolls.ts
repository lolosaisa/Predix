/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PredixPollsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closePoll"
      | "createPoll"
      | "getPollResults"
      | "pollCount"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PollClosed" | "PollCreated" | "Voted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closePoll",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPoll",
    values: [string, string[], BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPollResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pollCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "closePoll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPoll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPollResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pollCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace PollClosedEvent {
  export type InputTuple = [pollId: BigNumberish];
  export type OutputTuple = [pollId: bigint];
  export interface OutputObject {
    pollId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PollCreatedEvent {
  export type InputTuple = [
    pollId: BigNumberish,
    title: string,
    options: string[],
    pollType: BigNumberish
  ];
  export type OutputTuple = [
    pollId: bigint,
    title: string,
    options: string[],
    pollType: bigint
  ];
  export interface OutputObject {
    pollId: bigint;
    title: string;
    options: string[];
    pollType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [
    pollId: BigNumberish,
    optionIndex: BigNumberish,
    voter: AddressLike
  ];
  export type OutputTuple = [
    pollId: bigint,
    optionIndex: bigint,
    voter: string
  ];
  export interface OutputObject {
    pollId: bigint;
    optionIndex: bigint;
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PredixPolls extends BaseContract {
  connect(runner?: ContractRunner | null): PredixPolls;
  waitForDeployment(): Promise<this>;

  interface: PredixPollsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closePoll: TypedContractMethod<[_pollId: BigNumberish], [void], "nonpayable">;

  createPoll: TypedContractMethod<
    [
      _title: string,
      _options: string[],
      _pollType: BigNumberish,
      _whitelist: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  getPollResults: TypedContractMethod<
    [_pollId: BigNumberish],
    [[string, bigint[]] & { title: string; votes: bigint[] }],
    "view"
  >;

  pollCount: TypedContractMethod<[], [bigint], "view">;

  vote: TypedContractMethod<
    [_pollId: BigNumberish, _optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closePoll"
  ): TypedContractMethod<[_pollId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPoll"
  ): TypedContractMethod<
    [
      _title: string,
      _options: string[],
      _pollType: BigNumberish,
      _whitelist: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPollResults"
  ): TypedContractMethod<
    [_pollId: BigNumberish],
    [[string, bigint[]] & { title: string; votes: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pollCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_pollId: BigNumberish, _optionIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PollClosed"
  ): TypedContractEvent<
    PollClosedEvent.InputTuple,
    PollClosedEvent.OutputTuple,
    PollClosedEvent.OutputObject
  >;
  getEvent(
    key: "PollCreated"
  ): TypedContractEvent<
    PollCreatedEvent.InputTuple,
    PollCreatedEvent.OutputTuple,
    PollCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;

  filters: {
    "PollClosed(uint256)": TypedContractEvent<
      PollClosedEvent.InputTuple,
      PollClosedEvent.OutputTuple,
      PollClosedEvent.OutputObject
    >;
    PollClosed: TypedContractEvent<
      PollClosedEvent.InputTuple,
      PollClosedEvent.OutputTuple,
      PollClosedEvent.OutputObject
    >;

    "PollCreated(uint256,string,string[],uint8)": TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;
    PollCreated: TypedContractEvent<
      PollCreatedEvent.InputTuple,
      PollCreatedEvent.OutputTuple,
      PollCreatedEvent.OutputObject
    >;

    "Voted(uint256,uint256,address)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
  };
}
